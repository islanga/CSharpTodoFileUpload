@page "/fileupload"
@inject ILogger<FileUpload> Logger
@inject IWebHostEnvironment Environment

<h3>File Upload</h3>

<div class="card">
    <div class="card-body">
        <div class="row">
            <div class="col">
                <label for="">Max file size:</label>
                <input class="form-control" type="number" @bind="maxFileSize" />
            </div>
            <div class="col">
                <label for="">Max allowed files:</label>
                <input class="form-control" type="number" @bind="maxAllowedFiles" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <label for="">Upload up to @maxAllowedFiles of up to @maxFileSize</label>
                <InputFile class="form-control" OnChange="@LoadFiles" multiple />
            </div>
        </div>

        @if (isLoading)
        {
            <p>Uploading...</p>
        }
        else
        {
            <ul>
                @foreach (var file in loadedFiles)
                {
                    <li>
                        <ul>
                            <li>Name: @file.Name</li>
                            <li>Last modified: @file.LastModified.ToString()</li>
                            <li>Size (bytes): @file.Size</li>
                            <li>Content type: @file.ContentType</li>
                        </ul>
                    </li>
                }
            </ul>
        }
    </div>
</div>

@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);

                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var path = Path.Combine(Environment.ContentRootPath,
                        Environment.EnvironmentName, "unsafe_uploads",
                        trustedFileNameForFileStorage);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
    }
}
